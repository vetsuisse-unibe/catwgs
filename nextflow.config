// Global default params, used in configs
params {
  // Entry point - can be 'start', 'haplotypecaller', or 'cohortmap'
  entry_point                = 'start'
  
  // Input options
  samples                    = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dsl2/assets/sampleSheet_Sep2025.txt"
  assembly                   = "F.catus_Fca126_mat1.0"
  ref                        = "/data/references/Felis_catus/NCBI/F.catus_Fca126_mat1.0/Sequence/bwa/F.catus_Fca126_mat1.0_genomic.fa"
  fai                        = "/data/references/Felis_catus/NCBI/F.catus_Fca126_mat1.0/Sequence/bwa/F.catus_Fca126_mat1.0_genomic.fa.fai"
  dict                       = "/data/references/Felis_catus/NCBI/F.catus_Fca126_mat1.0/Sequence/F.catus_Fca126_mat1.0_genomic.dict"
  intervals_folder           = "/data/references/Felis_catus/NCBI/F.catus_Fca126_mat1.0/Sequence/interval-files-folder-48/"
  regionsFile                = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/regions.wholeGenome.txt"

  // Output options
  dedup                      = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dedup_bams/Fca126"
  gVCF_folder                = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/gVCFs/"
  outdir                     = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/gvcf/Fca126" 
  cohortMapFolder            = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dsl2/cohortMap/Fca126"
  vcfFolder                  = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dsl2/vcf/"
  finalVcfFolder             = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dsl2/final_vcf/"
  
  // snpEff annotation parameters
  snpeff_path                = "/data/users/vjaganna/software/snpEff/exec/snpeff"
  snpeff_config              = "/data/users/vjaganna/software/snpEff/snpEff.config"
  genome_version             = "F.catus_Fca126_mat1.0"
  
  // Temporary directory settings
  scratch_dir                = "/data/projects/p531_Felis_Catus__whole_genome_Analysis/nextFlow/dsl2/tmp"
  
  // Initialize label parameter with a default value
  label                      = "default"
  
  // Max resource parameters
  max_memory                 = 128.GB
  max_cpus                   = 16
  max_time                   = 72.h

  // Boilerplate options
  publish_dir_mode           = 'copy'
  email                      = null
  email_on_fail              = null
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  tracedir                   = "${params.outdir}/pipeline_info"
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = null
  config_profile_contact     = null
  config_profile_url         = null
  validate_params            = true
  show_hidden_params         = false
  schema_ignore_params       = 'genomes'
}

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda {
    params.enable_conda    = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  mamba {
    params.enable_conda    = true
    conda.useMamba         = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  unibe {
    // Executor configuration for SLURM
    executor {
      queueSize = 200              // Limit concurrent jobs in queue
      submitRateLimit = '10/1min'  // Prevent overwhelming scheduler
      pollInterval = '30min'        // Check job status every 30 minutes
    }

    process {
      executor = 'slurm'
      queue = 'pibu_el8'
      clusterOptions = '--partition=pibu_el8'

      // Set SCRATCH environment variable for all processes
      beforeScript = "export SCRATCH='${params.scratch_dir}'"
    }

    // Default resource settings
    process {
      cpus = { check_max(1 * task.attempt, 'cpus') }
      memory = { check_max(4.GB * task.attempt, 'memory') }
      time = { check_max(1.h * task.attempt, 'time') }

      errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      // Use symlinks to save disk space
      stageInMode = 'symlink'

      // Use scratch for temporary files with auto-cleanup
      // 'true' uses SLURM's $TMPDIR automatically
      scratch = true

      // Lenient cache for better resume with HPC
      cache = 'lenient'
    }
    
    // Process-specific settings
    process {
      withName: runFastp {
        module = 'fastp/0.23.4-GCC-10.3.0'
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time = { check_max(4.h * task.attempt, 'time') }
        clusterOptions = '--job-name=runFastp --partition=pibu_el8'
      }
      withName: runBWA {
        module = 'BWA-MEM2/2.2.1-GCC-10.3.0:SAMtools/1.13-GCC-10.3.0'
        cpus = { check_max(8 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }
        time = { check_max(8.h * task.attempt, 'time') }
        clusterOptions = '--job-name=runBWA --partition=pibu_el8'
      }
      withName: mergeBams {
        module = 'picard/2.25.5-Java-13:SAMtools/1.13-GCC-10.3.0'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(24.h * task.attempt, 'time') }
        clusterOptions = '--job-name=mergeBam --partition=pibu_el8'
      }
      withName: markDuplicates {
        module = 'picard/2.25.5-Java-13:GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
        clusterOptions = '--job-name=runMarkDuplicates --partition=pibu_el8'
      }
      withName: haplotypeCaller {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
        clusterOptions = '--job-name=haplotypeCaller --partition=pibu_el8'
      }
      withName: gatherVCFs {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
        clusterOptions = '--job-name=gatherVCFs --partition=pibu_el8'
      }
      withName: genomicsDB {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(50.GB * task.attempt, 'memory') }
        time = { check_max(24.h * task.attempt, 'time') }
        clusterOptions = '--job-name=genomicsDB --partition=pibu_el8'
        maxForks = 10  // Limit concurrent executions to prevent resource contention
      }
      withName: genotypeGVCFs {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
        clusterOptions = '--job-name=genotypeGVCFs --partition=pibu_el8'
      }
      withName: indexgVCF {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(30.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
        clusterOptions = '--job-name=indexgVCF --partition=pibu_el8'
      }
      withName: gatherFinalVCFs {
        module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11:Java/17.0.6'
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(40.GB * task.attempt, 'memory') }
        time = { check_max(24.h * task.attempt, 'time') }
        clusterOptions = '--job-name=gatherFinalVCFs --partition=pibu_el8'
      }
    }
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
  name            = 'nf-core/lynxwgs'
  author          = 'Vidhya Jagannathan'
  homePage        = 'https://github.com/nf-core/lynxwgs'
  description     = 'Nextflow pipeline for bwa+GATK best practices'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=21.10.3'
  version         = '1.0dev'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}